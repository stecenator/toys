#!/usr/bin/env python3
""" mp2nmon - Generuje plik disks.txt z definicjami grup dyskowych dla nmon na podstawie pojedynczch scieżek.
"""

import sys
import os
import re
from optparse import OptionParser

# Import prywatnych modułów z katalogu ../lib
sys.path.append("../lib")
import GenTools as gt

DEBUG = True
gt.DEBUG = True

def get_vgs():
	"""Zwraca listę VG"""
	ret = []
	pipe = os.popen("vgs -o vg_name --noheadings", "r", 1)
	line = pipe.readline()
	while line:
		gt.dbg("get_vgs", line.strip())
		ret.append(line.strip())
		line = pipe.readline()
	return ret

def get_paths_for_pv(pv):
	"""Zwraca listę scieżek dla urządzenia mpath"""
	ret = []

	pipe = os.popen("multipath -ll", "r", 1)
	line = pipe.readline()
	while line:
		if re.match(rf"^{pv}", line):
			gt.dbg("get_paths_for_pv", line.strip())
			pipe.readline()		# pomijanie size=....
			pipe.readline()		# pomijanie |-+- policy....
			line = pipe.readline().strip()[5:]
			gt.dbg("get_paths_for_pv", line)
			while re.search(fr"\d+:\d+:", line):	# wczytana linia ma postać 1:20...
				path = line.split()[1]
				gt.dbg("get_paths_for_pv", f"Scieżka {pv}: {path}.")
				ret.append(path)
				line = pipe.readline().strip()[4:]
				gt.dbg("get_paths_for_pv", f"Następna wczytana: {line}.")
				if re.search("policy", line):		# czytam drugą paczkę scieżek
					line = pipe.readline().strip()[4:]
			break
#		else:
#			gt.dbg("get_paths_for_pv", f"Dupa dla: {pv}. Linia {line.strip()}")

		line = pipe.readline()

	return ret


def get_pvs_by_vg():
	"""Zwraca dict VG z dict PV

	VG -> [PV -> [path1, path2]]
	"""
	ret = {}
	pth_lst = []
	pipe = os.popen("pvs -o pv_name,vg_name --noheadings", "r", 1)
	line = pipe.readline()
	while line:
		lst = line.split()
		vg = lst[1]
		if vg not in ret:
			ret[vg] = []

		gt.dbg("get_pvs_by_vg", f"maczuję {lst[0]}")
		m = re.match(fr" */dev/mapper/(\w+)\d*", lst[0])			# obcięcie PW /dev/mapper/mpathaXX z nazwy PV
		if m:
			pv = m.group(1)
			pth_lst = get_paths_for_pv(pv)
			ret[lst[1]].append({pv: pth_lst})
			gt.dbg("get_pvs_by_vg", f"Dodany do wyniku {pv}. Linia {line.strip()}")

		line = pipe.readline()
	return ret

def get_dm_for_lv(vg, lv):
	"""Zwraca dm-XX dla LV /dev/mapper/{vg}-{lv}
	"""

	tmp_vg = vg.replace('-', '--')  # Bo LVM2 w /dev/mapper zamienia pojedyncze '-' na podwójne
	tmp_lv = lv.replace('-', '--')  # Bo LVM2 w /dev/mapper zamienia pojedyncze '-' na podwójne


	gt.dbg("get_dm_for_lv", f"ls -la /dev/mapper/{tmp_vg}-{tmp_lv}")
	pipe = os.popen(f"ls -la /dev/mapper/{tmp_vg}-{tmp_lv}", "r", 1)
	line = pipe.readline()
	gt.dbg("get_dm_for_lv", f"grupa: {vg}, lv: {lv}")
	m = re.search(r"(dm-.*)$", line)
	dm = m.group(0)
	return dm


def get_lvs_by_vg():
	"""Zwraca dict VG z dm-XX wskazującyh na LV.
	VG -> [dm-1, dm-2]
	"""

	ret = {}
	lv_lst = []
	pipe = os.popen("lvs --separator ':' --noheadings", "r", 1)
	line = pipe.readline()
	while line:
		lst = line.split(':')
		vg = lst[1].rstrip()
		lv = lst[0].lstrip()
		gt.dbg("get_lvs_by_vg", f"grupa: {vg}, lv: {lv}")
		if vg not in ret:
			ret[vg] = []

		dm = get_dm_for_lv(vg, lv)
		ret[vg].append(dm)

		line = pipe.readline()

	return ret


def print_nmon_grps_by_paths(vgs):
	for grp in vgs.keys():
		print(f"{grp} ", end='')
		for pv in vgs[grp]:
			for path_lst in pv.values():
				for path in path_lst:
					print(f"{path} ", end='')
		print("")


def print_nmon_grps_by_lvs(vgs):
	for grp in vgs.keys():
		print(f"{grp} ", end='')
		for pv in vgs[grp]:
			for path_lst in pv.values():
				for path in path_lst:
					print(f"{path} ", end='')
		print("")

# Main
if __name__ == "__main__":
	vgs = get_lvs_by_vg()
	print(vgs)
	print_nmon_grps_by_lvs(vgs)
