#!/usr/bin/env python3
""" lvm2nmon - Generuje plik disks.txt z definicjami grup dyskowych dla nmon na podstawie dm-XX 
	dla logicznych wolumenów.

	marcin_stec@pl.ibm.com
"""

import sys
import os
import re
from optparse import OptionParser

# Import prywatnych modułów z katalogu ../lib
sys.path.append("../lib")
import GenTools as gt

# Setup part
use = "Generator grup dyskowych dla nmon -g\nUżycie: %prog [-d]"

parser = OptionParser(usage=use)
parser.add_option("-d", "--debug",
	action="store_true", dest="dbg", default=False,
	help="Tryb debugowani")
	
(options, args) = parser.parse_args()

if options.dbg:
	DEBUG = True
	gt.DEBUG = True


def get_dm_for_lv(vg, lv):
	"""Zwraca dm-XX dla LV /dev/mapper/{vg}-{lv}
	"""
	gt.dbg("get_dm_for_lv", f"ls -la /dev/mapper/{vg}-{lv}")
	pipe = os.popen(f"ls -la /dev/mapper/{vg}-{lv}", "r", 1)
	line = pipe.readline()
	gt.dbg("get_dm_for_lv", f"grupa: {vg}, lv: {lv}")
	m = re.search(r"(dm-.*)$", line)
	dm = m.group(0)
	return dm


def get_lvs_by_vg():
	"""Zwraca dict VG z dm-XX wskazującyh na LV.
	VG -> [dm-1, dm-2]
	"""

	ret = {}
	lv_lst = []
	pipe = os.popen("lvs --separator ':' --noheadings", "r", 1)
	line = pipe.readline()
	while line:
		lst = line.split(':')
		vg = lst[1].rstrip()
		lv = lst[0].lstrip()
		gt.dbg("get_lvs_by_vg", f"grupa: {vg}, lv: {lv}")
		if vg not in ret:
			ret[vg] = []

		dm = get_dm_for_lv(vg, lv)
		ret[vg].append(dm)

		line = pipe.readline()

	return ret


def print_nmon_grps_by_lvs(vgs):
	for grp in vgs.keys():
		print(f"{grp} ", end='')
		for dm in vgs[grp]:
			print(f"{dm} ", end='')

		print("")

# Main
if __name__ == "__main__":
	vgs = get_lvs_by_vg()
	print_nmon_grps_by_lvs(vgs)